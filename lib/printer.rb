module Printer
  STATE_START = Erubis::Eruby.new <<-EOT
<%= indent %><%= @name %>: Ki.State.design({

<% if @initial_substate %>
<%= indent %>\tinitialSubstate: '<%= @initial_substate.name %>',

<% end %>
<% if @entry_action %>
<%= indent %>\tenterState: function() {
<%= indent %>\t\t<%= $project_name %>.statechartFunctions.<%= @entry_action %>();
<%= indent %>\t}<%= @exit_action || !@transitions.empty? || !@substates.empty? ? ',' : '' %>

<% end %>
<% if @exit_action %>
<%= indent %>\texitState: function() {
<%= indent %>\t\t<%= $project_name %>.statechartFunctions.<%= @exit_action %>();
<%= indent %>\t}<%= !@transitions.empty? || !@substates.empty? ? ',' : '' %>

<% end %>
  EOT

  TRANSITIONS_COMMENT = Erubis::Eruby.new <<-EOT
<%= indent %>\t// Events handled by '<%= @name %>' state

  EOT

  TRANSITION = Erubis::Eruby.new("<%= @indent %>\t<%= @transition_name %>: function() {\n" +
                                 "<%= @indent %>\t\tthis.gotoState('<%= @dest_path %>');\n" +
                                 "<%= @indent %>\t}")
  
  SUBSTATES_COMMENT = Erubis::Eruby.new <<-EOT
<%= indent %>\t// Substates of '<%= @name %>' state

  EOT
  
  STATE_END = Erubis::Eruby.new('<%= indent %>})')

  def self.print_statechart(root_state)
    puts <<-EOS
/* NOTE! This file was automatically generated by vp_to_ki.rb. Any manual
   changes will be overwritten next time the script is run. Additional code,
   such as functions that are called by the enterState and exitState methods,
   should be implemented in a separate file. */

    EOS

    puts "#{$project_name}.statechart = Ki.Statechart.create({"
    puts
    puts root_state.output   # recursively prints the whole state tree
    puts '});'
  end

end

